Factory

To remove dependency on Bag class we use dependency inversion. Class Factory depends should not depend on Bag, only on the interface. I decided to define GiveTilesInterface and make Floor implement it to, as it is the same thing. I have made the similar thing with TableCenter class. This is not as useful as with bag class, but still useful (and I do not have to worry that I do not have TableCenter implemented yet).

With this it is easy to write a reasonable tests. Fake for TableCenter and UsedTiles are the same now, FakeGiveTiles. I created utils.py for reusable pieces of testing code as FakeGiveTiles. 

I allowed negative indices in .take method. I think it is a bad idea but I am not sure :).


Bag

Bag needs some kind of random in itself. For unit tests of other classes, there is no problem. We use dependency injection and write tests in similar way as in Factory class. But what about the unit test of Bag class or Factory class. There are several options:
1. Inject seed / Random object. This is a sound and very general approach, but it may be hard to write specific tests as we will be restricted by chosen seed.
2. Mock Bag class. In this way, there will be no automated testing of Bag class, no unit test, no integration test. This is OK for very small classes but Bag contains a bit of testable code. This means that we have two kinds of code in the class - testable and untestable. Thus the class is less cohesive than it should be. This leads to third solution we want to use
3. Split Bag class into two classes, a small untestable Random class and a larger Bag class.

Second issue is that, I can see, is that we may lack control over the order in which Factories are refiled. This will in most implementation depend on the container we choose while implementing TableArea class. Thus it would be neat if the random object would know something about the caller. To reduce the impact on the system I decided to solve this using Adapter pattern. Bag.take method will have another parameter indicating who is asking for Tiles. Adapters will remove this parameter and filling it with predefined values the adapter received in the constructor (BagEndpoint).

While writing tests I found out that this was not as smart of an idea as I thought. A problem appeared writing a test in the situation when Bag contained some Tiles, but not enough. The test is rather ugly. But more importantly, now, I see that the adapter class does solve the problem only partially, as it cannot resolve the situation when Bag becomes empty while filling factories. 

After some thinking, it seems like the order in which factories are called should be a requirement for TableArea class, as the problem seems unavoidable otherwise. I will not implement the changes right away. I want have this version in git. Plus, I do not know how to make tests nice when Bag is refiled while filling factories. I have time to think about it while I'll be implementing other classes.


Game

The class seems like it is lacking a bit of coherence. Namely I see two distinct things.
1. Coordination of the classes
2. Deciding whose turn it is.
The issue is, 1. does not really require an unit test, as it would not be substantially different from the code; 2. does. Of course as a student, I would probably ignore the issue, as there is a specific requirement for a solitary unit test of Game class; but here, I try to do the best I can. So I will try to resolve this properly.

Thus I decided to separate the code concerning whose turn it is to PlayerManager class. In my opinion, it is of little value to test the remainder of the Game class. The tests would mimic the implementation and it is almost certain that if there is an error in the implementation, the same error is in the tests. Besides that, the code will be covered very well by the integration tests. note however, that not everybody would agree with this opinion.


Back to Bag

I removed fancy decorators and made RandomTake class be aware of all tiles taken.


PatternLine

Her it was mostly about getting everything right. Note that even when I don't need it, I still added an interface between PatternLine and Floor. Consistency + it slightly improves documentation.


WallLine 

I decided to implement WallLine class as I saw a lot of complicated solutions. I quite like my solution. The line_up and line_down setter assertions payed off immediately as they detected an error in tests.


TableArea, UsedTiles, TableCenter

I am using https://github.com/spitalskya/PTS1-Azul to get team part of the project. There are some differences, i have to rewrite something now and then. I am doing this mostly so I can write and run an integration tests, so I am cutting corners and not doing everything. But I made a test that validates the order in which start_new_turn is called for factories. This may be interesting to see.


GameObserver, GameFinished, FinalPointsCalculation, Board

Ok, so I implemented FinalPointsCalculation. Plus some additional changes. There are probably some errors (one think I am afraid of is that I do not use ABCs), but I believe, integration test will find almost all. Again, this is not a good practice, just cutting corners to get things done in an unsound manner. Without these tests, not suitable for production even under very low risk circumstances.


Factories

I added factories that construct the game. Keeping in mind the desired structure of the test, I split game construction into three parts. The parts allow for a more fine setup. In this way, it will be easier to test edge cases in the smaller integration tests and the big integration test mimics the real game as much as possible.


Table Area and Board integration test

I made one test focusing on Bag refilling. I skip Board integration test that should deal with some special cases there, like patternlines being blocked due to wallwalllines already having a tile.



